// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Data.FBEntities
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBBaseEntity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FBBaseEntity GetRootAsFBBaseEntity(ByteBuffer _bb) { return GetRootAsFBBaseEntity(_bb, new FBBaseEntity()); }
  public static FBBaseEntity GetRootAsFBBaseEntity(ByteBuffer _bb, FBBaseEntity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBBaseEntity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ushort TargetId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte UpdateMask { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Rotation { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public Data.FBCommon.FBVec3? Position { get { int o = __p.__offset(12); return o != 0 ? (Data.FBCommon.FBVec3?)(new Data.FBCommon.FBVec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public ushort MoveCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort TargetIndex { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte MoveSpeed { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte AnimationSpeed { get { int o = __p.__offset(20); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte HpPct { get { int o = __p.__offset(22); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static void StartFBBaseEntity(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddTargetId(FlatBufferBuilder builder, ushort targetId) { builder.AddUshort(1, targetId, 0); }
  public static void AddUpdateMask(FlatBufferBuilder builder, byte updateMask) { builder.AddByte(2, updateMask, 0); }
  public static void AddRotation(FlatBufferBuilder builder, byte rotation) { builder.AddByte(3, rotation, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Data.FBCommon.FBVec3> positionOffset) { builder.AddStruct(4, positionOffset.Value, 0); }
  public static void AddMoveCount(FlatBufferBuilder builder, ushort moveCount) { builder.AddUshort(5, moveCount, 0); }
  public static void AddTargetIndex(FlatBufferBuilder builder, ushort targetIndex) { builder.AddUshort(6, targetIndex, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, byte moveSpeed) { builder.AddByte(7, moveSpeed, 0); }
  public static void AddAnimationSpeed(FlatBufferBuilder builder, byte animationSpeed) { builder.AddByte(8, animationSpeed, 0); }
  public static void AddHpPct(FlatBufferBuilder builder, byte hpPct) { builder.AddByte(9, hpPct, 0); }
  public static Offset<Data.FBEntities.FBBaseEntity> EndFBBaseEntity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Data.FBEntities.FBBaseEntity>(o);
  }
  public static void FinishFBBaseEntityBuffer(FlatBufferBuilder builder, Offset<Data.FBEntities.FBBaseEntity> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFBBaseEntityBuffer(FlatBufferBuilder builder, Offset<Data.FBEntities.FBBaseEntity> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
