// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Data.FBEntities
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBNpc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FBNpc GetRootAsFBNpc(ByteBuffer _bb) { return GetRootAsFBNpc(_bb, new FBNpc()); }
  public static FBNpc GetRootAsFBNpc(ByteBuffer _bb, FBNpc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBNpc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Data.FBEntities.FBBaseEntity? Base { get { int o = __p.__offset(4); return o != 0 ? (Data.FBEntities.FBBaseEntity?)(new Data.FBEntities.FBBaseEntity()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public short Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public short Maxhp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public short Mp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public short Maxmp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }

  public static Offset<Data.FBEntities.FBNpc> CreateFBNpc(FlatBufferBuilder builder,
      Offset<Data.FBEntities.FBBaseEntity> baseOffset = default(Offset<Data.FBEntities.FBBaseEntity>),
      StringOffset nameOffset = default(StringOffset),
      short hp = 100,
      short maxhp = 100,
      short mp = 100,
      short maxmp = 100) {
    builder.StartTable(6);
    FBNpc.AddName(builder, nameOffset);
    FBNpc.AddBase(builder, baseOffset);
    FBNpc.AddMaxmp(builder, maxmp);
    FBNpc.AddMp(builder, mp);
    FBNpc.AddMaxhp(builder, maxhp);
    FBNpc.AddHp(builder, hp);
    return FBNpc.EndFBNpc(builder);
  }

  public static void StartFBNpc(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddBase(FlatBufferBuilder builder, Offset<Data.FBEntities.FBBaseEntity> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(2, hp, 100); }
  public static void AddMaxhp(FlatBufferBuilder builder, short maxhp) { builder.AddShort(3, maxhp, 100); }
  public static void AddMp(FlatBufferBuilder builder, short mp) { builder.AddShort(4, mp, 100); }
  public static void AddMaxmp(FlatBufferBuilder builder, short maxmp) { builder.AddShort(5, maxmp, 100); }
  public static Offset<Data.FBEntities.FBNpc> EndFBNpc(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Data.FBEntities.FBNpc>(o);
  }
  public static void FinishFBNpcBuffer(FlatBufferBuilder builder, Offset<Data.FBEntities.FBNpc> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFBNpcBuffer(FlatBufferBuilder builder, Offset<Data.FBEntities.FBNpc> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
