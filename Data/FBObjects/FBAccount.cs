// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Data.FBObjects
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FBAccount : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FBAccount GetRootAsFBAccount(ByteBuffer _bb) { return GetRootAsFBAccount(_bb, new FBAccount()); }
  public static FBAccount GetRootAsFBAccount(ByteBuffer _bb, FBAccount obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBAccount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Username { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsernameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetUsernameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetUsernameArray() { return __p.__vector_as_array<byte>(6); }
  public string Password { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(8); }
  public string Email { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmailBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEmailBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEmailArray() { return __p.__vector_as_array<byte>(10); }
  public uint Timecreate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Status { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ushort Loginattempts { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public uint Lockouttime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Contentids { get { int o = __p.__offset(20); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Data.FBObjects.FBAccount> CreateFBAccount(FlatBufferBuilder builder,
      uint id = 0,
      StringOffset usernameOffset = default(StringOffset),
      StringOffset passwordOffset = default(StringOffset),
      StringOffset emailOffset = default(StringOffset),
      uint timecreate = 0,
      byte status = 0,
      ushort loginattempts = 0,
      uint lockouttime = 0,
      byte contentids = 0) {
    builder.StartTable(9);
    FBAccount.AddLockouttime(builder, lockouttime);
    FBAccount.AddTimecreate(builder, timecreate);
    FBAccount.AddEmail(builder, emailOffset);
    FBAccount.AddPassword(builder, passwordOffset);
    FBAccount.AddUsername(builder, usernameOffset);
    FBAccount.AddId(builder, id);
    FBAccount.AddLoginattempts(builder, loginattempts);
    FBAccount.AddContentids(builder, contentids);
    FBAccount.AddStatus(builder, status);
    return FBAccount.EndFBAccount(builder);
  }

  public static void StartFBAccount(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddUsername(FlatBufferBuilder builder, StringOffset usernameOffset) { builder.AddOffset(1, usernameOffset.Value, 0); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(2, passwordOffset.Value, 0); }
  public static void AddEmail(FlatBufferBuilder builder, StringOffset emailOffset) { builder.AddOffset(3, emailOffset.Value, 0); }
  public static void AddTimecreate(FlatBufferBuilder builder, uint timecreate) { builder.AddUint(4, timecreate, 0); }
  public static void AddStatus(FlatBufferBuilder builder, byte status) { builder.AddByte(5, status, 0); }
  public static void AddLoginattempts(FlatBufferBuilder builder, ushort loginattempts) { builder.AddUshort(6, loginattempts, 0); }
  public static void AddLockouttime(FlatBufferBuilder builder, uint lockouttime) { builder.AddUint(7, lockouttime, 0); }
  public static void AddContentids(FlatBufferBuilder builder, byte contentids) { builder.AddByte(8, contentids, 0); }
  public static Offset<Data.FBObjects.FBAccount> EndFBAccount(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Data.FBObjects.FBAccount>(o);
  }
  public static void FinishFBAccountBuffer(FlatBufferBuilder builder, Offset<Data.FBObjects.FBAccount> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFBAccountBuffer(FlatBufferBuilder builder, Offset<Data.FBObjects.FBAccount> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
